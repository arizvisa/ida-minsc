.. py:module:: function

function -- Function module
===========================

This module exposes a number of tools that can be used on or in
a particular function. There are a couple of namespaces that can allow
one to interact with the different components that are available for
a function.

The base argument type for a number of the utilities within this module
is the :py:obj:`idaapi.func_t`. This type is interchangeable with an address or
a name and either can be used to identify a function. Some of the tools
exposed in this module allow for one to modify comments, rename, or
determine the relationships between functions.

Some namespaces are provided for interacting with the different components
that IDA associates with each function. This can be used to navigate
to the different parts of a function. Some of the available namespaces
are :py:obj:`type`, :py:obj:`block`, :py:obj:`chunk`, :py:obj:`blocks`, :py:obj:`chunks`, and :py:obj:`frame`.

-------------
Function list
-------------

The functions that are available in this module use multicased
functions and aliases. For more information on this, please see
:ref:`multicase-aliases` and :ref:`multicase-functions`.

.. py:function:: address()
   
   Return the address of the entrypoint for the current function.
   
   Aliases: :py:func:`function.top<address>`, :py:func:`function.addr<address>`
   
.. py:function:: address(func)
   
   Return the address for the entrypoint belonging to the function ``func``.
   
   Aliases: :py:func:`function.top<address>`, :py:func:`function.addr<address>`
   
   :param func: the function to return the address for
   
.. py:function:: address(func, offset)
   
   Return the address for the entrypoint belonging to the function ``func`` and add the provided ``offset`` to it.
   
   Aliases: :py:func:`function.top<address>`, :py:func:`function.addr<address>`
   
   :param func: the function to return the address for
   :param offset: the amount to add to the returned address
   :type offset: int or long
   
.. py:function:: bottom()
   
   Return the exit-points of the current function.
   
.. py:function:: bottom(func)
   
   Return the exit-points of the function ``func``.
   
   :param func: the function to return the exit-points for
   
.. py:function:: bounds()
   
   Return a tuple containing the bounds of the first chunk of the current function.
   
   Aliases: :py:func:`function.range<bounds>`
   
.. py:function:: bounds(func)
   
   Return a tuple containing the bounds of the first chunk of the function ``func``.
   
   Aliases: :py:func:`function.range<bounds>`
   
   :param func: the function to return the boundaries for
   
.. py:function:: by()
   
   Return the current function.
   
.. py:function:: by(func)
   
   Return the function identified by ``func``.
   
   :param func: an :py:obj:`idaapi.func_t` to return
   :type func: idaapi.func_t
   
.. py:function:: by(ea)
   
   Return the function at the address ``ea``.
   
   :param ea: the address of the function to return
   :type ea: int or long
   
.. py:function:: by(name)
   
   Return the function with the specified ``name``.
   
   :param name: the name of the function to return
   :type name: str
   
.. py:function:: by_address()
   
   Return the function at the current address.
   
.. py:function:: by_address(ea)
   
   Return the function containing the address ``ea``.
   
   Aliases: :py:func:`function.byaddress<by_address>`
   
   :param ea: the address of the function to return
   :type ea: int or long
   
.. py:function:: by_name(name)
   
   Return the function with the specified ``name``.
   
   Aliases: :py:func:`function.byname<by_name>`
   
   :param name: the name of the function to return
   
.. py:function:: color()
   
   Return the color (RGB) of the current function.
   
.. py:function:: color(func)
   
   Return the color (RGB) of the function ``func``.
   
   :param func: the function to return the color for
   
.. py:function:: color(func, none)
   
   Remove the color for the function ``func``.
   
   :param func: the function to remove the color from
   :param none: the python value :py:obj:`None`
   :type none: None
   
.. py:function:: color(func, rgb)
   
   Set the color (RGB) of the function ``func`` to ``rgb``.
   
   :param func: the function to set the color for
   :param rgb: the color as a red, green, and blue integer (``0x00RRGGBB``)
   :type rgb: int or long
   
.. py:function:: color(none)
   
   Remove the color from the current function.
   
   :param none: the python value :py:obj:`None`
   :type none: None
   
.. py:function:: comment(\*\*repeatable)
   
   Return the comment for the current function.
   
   :param \*\*repeatable: a boolean specifying that the repeatable comment should be returned
   
.. py:function:: comment(func, \*\*repeatable)
   
   Return the comment for the function ``func``.
   
   If the bool ``repeatable`` is specified, then return the repeatable comment.
   
   :param func: the function to return the comment for
   :param \*\*repeatable: a boolean specifying that the repeatable comment should be returned
   
.. py:function:: comment(string, \*\*repeatable)
   
   Set the comment for the current function to ``string``.
   
   :param string: the comment to apply
   :type string: str
   :param \*\*repeatable: a boolean specifying that the repeatable comment should be modified
   
.. py:function:: comment(none, \*\*repeatable)
   
   Remove the comment for the current function.
   
   :param none: the python value :py:obj:`None`
   :type none: None
   :param \*\*repeatable: a boolean specifying that the repeatable comment should be removed
   
.. py:function:: comment(func, string, \*\*repeatable)
   
   Set the comment for the function ``func`` to ``string``.
   
   If the bool ``repeatable`` is specified, then modify the repeatable comment.
   
   :param func: the function to assign the comment to
   :param string: the comment to apply
   :type string: str
   :param \*\*repeatable: a boolean specifying that the repeatable comment should be modified
   
.. py:function:: comment(func, none, \*\*repeatable)
   
   Remove the comment for the function ``func``.
   
   If the bool ``repeatable`` is specified, then remove the repeatable comment.
   
   :param func: the function to remove the comment from
   :param none: the python value :py:obj:`None`
   :type none: None
   :param \*\*repeatable: a boolean specifying that the repeatable comment should be removed
   
.. py:function:: marks()
   
   Return all the marks in the current function.
   
.. py:function:: marks(func)
   
   Return all the marks in the function ``func``.
   
   :param func: the function containing the marks to return
   
.. py:function:: name()
   
   Return the name of the current function.
   
.. py:function:: name(func)
   
   Return the name of the function ``func``.
   
   :param func: the function to return the name for
   
.. py:function:: name(none, \*\*flags)
   
   Remove the custom-name from the current function.
   
   :param none: the python value :py:obj:`None`
   :type none: None
   :param \*\*flags: any extra flags to use when removing the name
   
.. py:function:: name(string, \*suffix, \*\*flags)
   
   Set the name of the current function to ``string``.
   
   :param string: the string containing the new name to use
   :type string: str
   :param \*suffix: any extra names to append to the name
   :param \*\*flags: any extra flags to use when setting the name. if ``listed`` is set to true, then ensure the name is added to the \\"names\\" list
   
.. py:function:: name(func, none, \*\*flags)
   
   Remove the custom-name from the function ``func``.
   
   :param func: the function to remove the name for
   :param none: the python value :py:obj:`None`
   :type none: None
   :param \*\*flags: any extra flags to use when removing the name
   
.. py:function:: name(func, string, \*suffix, \*\*flags)
   
   Set the name of the function ``func`` to ``string``.
   
   If ``flags`` is specified, then use the specified value as the flags.
   If the boolean ``listed`` is specified, then specify whether to add the label to the Names list or not.
   
   :param func: the function to set the name of
   :param string: the string containing the new name to use
   :type string: str
   :param \*suffix: any extra names to append to the name
   :param \*\*flags: any extra flags to use when setting the name. if ``listed`` is set to true, then ensure the name is added to the \\"names\\" list
   
.. py:function:: new()
   
   Create a new function at the current address.
   
   Aliases: :py:func:`function.make<new>`, :py:func:`function.add<new>`
   
.. py:function:: new(ea)
   
   Create a new function at the address specified by ``ea``.
   
   Aliases: :py:func:`function.make<new>`, :py:func:`function.add<new>`
   
   :param ea: the starting address of the function to create
   :type ea: int or long
   
.. py:function:: new(start, end)
   
   Create a new function from the address ``start`` until ``end``.
   
   Aliases: :py:func:`function.make<new>`, :py:func:`function.add<new>`
   
   :param start: the starting address of the function to create
   :type start: int or long
   :param end: the end address of the function to create
   :type end: int or long
   
.. py:function:: new(bounds)
   
   Create a new function using the specified ``bounds``.
   
   Aliases: :py:func:`function.make<new>`, :py:func:`function.add<new>`
   
   :param bounds: the boundaries of the function to create
   :type bounds: tuple
   
.. py:function:: offset()
   
   Return the offset from the base of the database for the current function.
   
.. py:function:: offset(func)
   
   Return the offset from the base of the database for the function ``func``.
   
   :param func: anything referring to a function to return the offset for
   
.. py:function:: offset(func, offset)
   
   Return the offset from the base of the database for the function ``func`` and add the provided ``offset`` to it.
   
   :param func:
   :param offset:
   :type offset: int or long
   
.. py:function:: prototype()
   
   Return the prototype of the current function if it has one.
   
.. py:function:: prototype(func)
   
   Return the prototype of the function ``func`` if it has one.
   
   :param func: the function to return the prototype for
   
.. py:function:: remove()
   
   Remove the current function from the database.
   
.. py:function:: remove(func)
   
   Remove the function ``func`` from the database.
   
   :param func: the function to remove
   
.. py:function:: remove(bounds)
   
   Remove the function specified by ``bounds`` from the database.
   
   :param bounds:
   :type bounds: tuple
   
.. py:function:: select(\*\*boolean)
   
   Query the contents of the current function for any tags specified by ``boolean``
   
   :param \*\*boolean: either ``And`` or ``Or`` which specifies required or optional tags (respectively)
   
.. py:function:: select(tag, \*Or, \*\*boolean)
   
   Query the contents of the current function for the specified ``tag`` and any others specified as ``Or``.
   
   :param tag: a required tag name to search the contents for
   :type tag: str
   :param \*Or: any other tag names to include
   :param \*\*boolean: either ``And`` or ``Or`` which specifies required or optional tags (respectively)
   
.. py:function:: select(func, tag, \*Or, \*\*boolean)
   
   Query the contents of the function ``func`` for the specified ``tag`` and any others specified as ``Or``.
   
   :param func: the function containing the contents tags to select
   :param tag: a required tag name to search the contents for
   :type tag: str
   :param \*Or: any other tag names to include
   :param \*\*boolean: either ``And`` or ``Or`` which specifies required or optional tags (respectively)
   
.. py:function:: select(func, tag, \*Or, \*\*boolean)
   
   Query the contents of the function ``func`` for the specified ``tag`` and any others specified as ``Or``.
   
   :param func: the function containing the contents tags to select
   :param tag: a list of tag names to search the contents for
   :type tag: set or list
   :param \*Or: any other tag names to include
   :param \*\*boolean: either ``And`` or ``Or`` which specifies required or optional tags (respectively)
   
.. py:function:: select(func, \*\*boolean)
   
   Query the contents of the function ``func`` for any tags specified by ``boolean``. Yields each address found along with the matching tags as a dictionary.
   
   If ``And`` contains an iterable then require the returned address contains them.
   If ``Or`` contains an iterable then include any other tags that are specified.
   
   :param func: the function containing the contents tags to select
   :param \*\*boolean: either ``And`` or ``Or`` which specifies required or optional tags (respectively)
   
.. py:function:: switches()
   
   Yield each switch found in the current function.
   
.. py:function:: switches(func)
   
   Yield each switch found in the function identifed by ``func``.
   
   :param func: the function to yield all the switches for
   
.. py:function:: tag()
   
   Returns all the tags defined for the current function.
   
.. py:function:: tag(key)
   
   Returns the value of the tag identified by ``key`` for the current function.
   
   :param key: a string representing the tag name to return
   :type key: str
   
.. py:function:: tag(key, value)
   
   Sets the value for the tag ``key`` to ``value`` for the current function.
   
   :param key: a string representing the tag name
   :type key: str
   :param value: a python object to store at the tag
   
.. py:function:: tag(func, key)
   
   Returns the value of the tag identified by ``key`` for the function ``func``.
   
   :param func: the function to return the tag for
   :param key: a string representing the tag name to return
   :type key: str
   
.. py:function:: tag(func)
   
   Returns all the tags defined for the function ``func``.
   
   :param func: the function to return all the tags for
   
.. py:function:: tag(func, key, value)
   
   Sets the value for the tag ``key`` to ``value`` for the function ``func``.
   
   :param func: the function to assign the tag to
   :param key: a string representing the tag name to assign
   :type key: str
   :param value: a python object to store at the tag
   
.. py:function:: tag(key, none)
   
   Removes the tag identified by ``key`` for the current function.
   
   :param key: a string representing the tag name to remove
   :type key: str
   :param none: the python value :py:obj:`None`
   :type none: None
   
.. py:function:: tag(func, key, none)
   
   Removes the tag identified by ``key`` from the function ``func``.
   
   :param func: the function to remove the tag from
   :param key: a string representing the tag name to remove
   :type key: str
   :param none: the python value :py:obj:`None`
   :type none: None
   
.. py:function:: tags()
   
   Returns all of the content tags for the function at the current address.
   
.. py:function:: tags(ea)
   
   Returns all of the content tags for the function at the address ``ea``.
   
   :param ea: the address of the function containing the content tags to return
   :type ea: int or long
   
.. py:function:: tags(func)
   
   Returns all of the content tags for the function ``func``.
   
   :param func: the function containing the content tags to return
   
.. py:function:: within()
   
   Return if the current address is within a function.
   
.. py:function:: within(ea)
   
   Return if the address ``ea`` is within a function.
   
   :param ea: the address to check for function membership
   :type ea: int or long
   
--------------
Namespace list
--------------

These are the namespaces available within this module. Namespaces
group similar functions that can be used typically for the same
concept. Please see :ref:`multicase-namespaces` for more
information on namespaces. For more information on multicase
functions or aliases, please see :ref:`multicase-functions` or
:ref:`multicase-aliases`.

.. _ns-function-block:

**************
function.block
**************

This namespace is for interacting with a single basic block
belonging to a function. By default the bounds of the selected
basic block will be returned. This bounds or an address within
these bounds can then be used in other functions within this
namespace.

Some examples of this functionality can be::

    > B = function.block(ea)
    > bid = function.block.id()
    > c = function.block.color(ea, rgb)
    > print( function.block.before(ea) )
    > for ea in function.block.iterate(): print( database.disasm(ea) )
    > for ea, op, st in function.block.register('eax', read=1): ...
    > print( function.block.read().encode('hex') )
    > print( function.block.disasm(ea) )

.. py:function:: block(\*\*flags)
   
   Returns the boundaries of the current basic block.
   
   :param \*\*flags:
   
.. py:function:: block(ea, \*\*flags)
   
   Returns the boundaries of the basic block at address ``ea``.
   
   :param ea: the address containing the basic block to return the boundaries for
   :type ea: int or long
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart the block comes from
   
.. py:function:: block(func, ea, \*\*flags)
   
   Returns the boundaries of the basic block at address ``ea`` in function ``func``.
   
   :param func: the function containing the basic block
   :param ea: the address containing the basic block to return the boundaries for
   :type ea: int or long
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart the block comes from
   
.. py:function:: block(func, ea, flags)
   
   Returns the boundaries of the basic block with the specified ``flags`` (:py:obj:`idaapi.FC_\*`) at address ``ea`` in function ``func``.
   
   :param func:
   :param ea:
   :type ea: int or long
   :param flags:
   :type flags: int or long
   
.. py:function:: block(bb)
   
   Returns the boundaries of the basic block ``bb``.
   
   :param bb: the basic block to return the boundaries for
   :type bb: idaapi.BasicBlock
   
.. py:function:: block(bounds, \*\*flags)
   
   Return the boundaries of the basic block identified by ``bounds``.
   
   :param bounds: the boundaries of the basic block to return the basic block for
   :type bounds: tuple
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart the block comes from
   
.. py:function:: block\.address()
   
   Return the top address for the basic block containing the current address.
   
.. py:function:: block\.address(ea)
   
   Return the top address for the basic block containing the address ``ea``.
   
   :param ea: the address of the basic block to return the address of
   :type ea: int or long
   
.. py:function:: block\.address(ea, offset)
   
   Return the top address for the basic block containing the address ``ea`` and add the provided ``offset`` to it.
   
   :param ea: the address of the basic block to return the address of
   :type ea: int or long
   :param offset: the amount to add to the returned address
   :type offset: int or long
   
.. py:function:: block\.after()
   
   Return the addresses of all the instructions that the current basic block leaves to.
   
   Aliases: :py:func:`function.block.succs<block\.after>`, :py:func:`function.block.successors<block\.after>`
   
.. py:function:: block\.after(ea)
   
   Return the addresses of all the instructions that the basic block at address ``ea`` leaves to.
   
   Aliases: :py:func:`function.block.succs<block\.after>`, :py:func:`function.block.successors<block\.after>`
   
   :param ea: the address of the basic block to return the successors for
   :type ea: int or long
   
.. py:function:: block\.after(bounds)
   
   Return the addresses of all the instructions that branch to the basic block identified by ``bounds``.
   
   Aliases: :py:func:`function.block.succs<block\.after>`, :py:func:`function.block.successors<block\.after>`
   
   :param bounds: the boundaries of the basic block to return the successors for
   :type bounds: tuple
   
.. py:function:: block\.after(bb)
   
   Return the addresses of all the instructions that branch to the basic block ``bb``.
   
   Aliases: :py:func:`function.block.succs<block\.after>`, :py:func:`function.block.successors<block\.after>`
   
   :param bb: the basic block to return the successors for
   :type bb: idaapi.BasicBlock
   
.. py:function:: block\.at(\*\*flags)
   
   Return the :py:obj:`idaapi.BasicBlock` of the current address in the current function.
   
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart the block comes from
   
.. py:function:: block\.at(ea, \*\*flags)
   
   Return the :py:obj:`idaapi.BasicBlock` of address ``ea`` in the current function.
   
   :param ea: the address of the basic block to return
   :type ea: int or long
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart the block comes from
   
.. py:function:: block\.at(func, ea, \*\*flags)
   
   Return the :py:obj:`idaapi.BasicBlock` of address ``ea`` in the function ``func``.
   
   :param func: the function containing the basic block
   :param ea: the address of the basic block to return
   :type ea: int or long
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart the block comes from
   
.. py:function:: block\.at(bb)
   
   Return the :py:obj:`idaapi.BasicBlock` of the basic block ``bb``.
   
   :param bb: the basic block to return
   :type bb: idaapi.BasicBlock
   
.. py:function:: block\.at(bounds, \*\*flags)
   
   Return the :py:obj:`idaapi.BasicBlock` identified by ``bounds``.
   
   :param bounds: the boundaries of the basic block to return
   :type bounds: tuple
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart the block comes from
   
.. py:function:: block\.before()
   
   Return the addresses of all the instructions that branch to the current basic block.
   
   Aliases: :py:func:`function.block.preds<block\.before>`, :py:func:`function.block.predecessors<block\.before>`
   
.. py:function:: block\.before(ea)
   
   Return the addresses of all the instructions that branch to the basic block at address ``ea``.
   
   Aliases: :py:func:`function.block.preds<block\.before>`, :py:func:`function.block.predecessors<block\.before>`
   
   :param ea: the address of the basic block to return the predecessors for
   :type ea: int or long
   
.. py:function:: block\.before(bounds)
   
   Return the addresses of all the instructions that branch to the basic block identified by ``bounds``.
   
   Aliases: :py:func:`function.block.preds<block\.before>`, :py:func:`function.block.predecessors<block\.before>`
   
   :param bounds: the boundaries of the basic block to return the predecessors for
   :type bounds: tuple
   
.. py:function:: block\.before(bb)
   
   Return the addresses of all the instructions that branch to the basic block ``bb``.
   
   Aliases: :py:func:`function.block.preds<block\.before>`, :py:func:`function.block.predecessors<block\.before>`
   
   :param bb: the basic block to return the predecessors for
   :type bb: idaapi.BasicBlock
   
.. py:function:: block\.bottom()
   
   Return the bottom address of the basic block at the current address.
   
.. py:function:: block\.bottom(ea)
   
   Return the bottom address of the basic block at address ``ea``.
   
   :param ea: the address belonging to the basic block to return the bottom address for
   :type ea: int or long
   
.. py:function:: block\.bottom(bb)
   
   Return the bottom address of the basic block ``bb``.
   
   :param bb: the basic block to return the bottom address for
   :type bb: idaapi.BasicBlock
   
.. py:function:: block\.bottom(bounds)
   
   Return the bottom address of the basic block identified by ``bounds``.
   
   :param bounds: the boundaries of the basic block to return the bottom address for
   :type bounds: tuple
   
.. py:function:: block\.color()
   
   Returns the color of the basic block at the current address.
   
.. py:function:: block\.color(none)
   
   Removes the color of the basic block at the current address.
   
   :param none: the python value :py:obj:`None`
   :type none: None
   
.. py:function:: block\.color(ea)
   
   Returns the color of the basic block at the address ``ea``.
   
   :param ea: the address of the basic block to return the color of
   :type ea: int or long
   
.. py:function:: block\.color(bb)
   
   Returns the color of the basic block ``bb``.
   
   :param bb: the basic block to return the color of
   :type bb: idaapi.BasicBlock
   
.. py:function:: block\.color(bounds)
   
   Returns the color of the basic block identified by ``bounds``.
   
   :param bounds: the boundaries of the basic block to return the color for
   :type bounds: tuple
   
.. py:function:: block\.color(ea, none)
   
   Removes the color of the basic block at the address ``ea``.
   
   :param ea: the address of the basic block to remove the color from
   :type ea: int or long
   :param none: the python value :py:obj:`None`
   :type none: None
   
.. py:function:: block\.color(bounds, none)
   
   Removes the color of the basic block identified by ``bounds``.
   
   :param bounds: the boundaries of the basic block to remove the color from
   :type bounds: tuple
   :param none: the python value :py:obj:`None`
   :type none: None
   
.. py:function:: block\.color(bb, none)
   
   Removes the color of the basic block ``bb``.
   
   :param bb: the basic block to remove the color from
   :type bb: idaapi.BasicBlock
   :param none: the python value :py:obj:`None`
   :type none: None
   
.. py:function:: block\.color(ea, rgb, \*\*frame)
   
   Sets the color of the basic block at the address ``ea`` to ``rgb``.
   
   If the color ``frame`` is specified, set the frame to the specified color.
   
   :param ea: the address belonging to the basic block to set the color for
   :type ea: int or long
   :param rgb: the color as a red, green, and blue integer (``0x00RRGGBB``)
   :type rgb: int or long
   :param \*\*frame: if ``frame`` is specified, then set the frame of the basic block to this color
   
.. py:function:: block\.color(bb, rgb, \*\*frame)
   
   Sets the color of the basic block ``bb`` to ``rgb``.
   
   :param bb: the basic block to set the color for
   :type bb: idaapi.BasicBlock
   :param rgb: the color as a red, green, and blue integer (``0x00RRGGBB``)
   :type rgb: int or long
   :param \*\*frame: if ``frame`` is specified, then set the frame of the basic block to this color
   
.. py:function:: block\.color(bounds, rgb, \*\*frame)
   
   Sets the color of the basic block identifed by ``bounds`` to ``rgb``.
   
   :param bounds: the boundaries of the basic block to set the color for
   :type bounds: tuple
   :param rgb: the color as a red, green, and blue integer (``0x00RRGGBB``)
   :type rgb: int or long
   :param \*\*frame: if ``frame`` is specified, then set the frame of the basic block to this color
   
.. py:function:: block\.contains(ea)
   
   Return whether the address ``ea`` is within the current basic block.
   
   :param ea: the address to be checked
   :type ea: int or long
   
.. py:function:: block\.contains(address, ea)
   
   Return whether the address ``ea`` is within the basic block at the specified ``address``.
   
   :param address: the address of the basic block
   :type address: int or long
   :param ea: the address to be checked
   :type ea: int or long
   
.. py:function:: block\.contains(func, address, ea)
   
   Return whether the address ``ea`` is within the basic block for the function ``func`` at the specified ``address``.
   
   :param func: the function containing the basic block
   :param address: the address of the basic block
   :type address: int or long
   :param ea: the address to be checked
   :type ea: int or long
   
.. py:function:: block\.contains(bb, ea)
   
   Return whether the address ``ea`` is within the basic block ``bb``.
   
   :param bb: the basic block to check
   :type bb: idaapi.BasicBlock
   :param ea: the address to be checked
   :type ea: int or long
   
.. py:function:: block\.contains(bounds, ea)
   
   Return whether the address ``ea`` is within the basic block identified by ``bounds``.
   
   :param bounds: the boundaries of the basic block to check
   :type bounds: tuple
   :param ea: the address to be checked
   :type ea: int or long
   
.. py:function:: block\.decompile()
   
   (UNSTABLE) Returns the decompiled code of the basic block at the current address.
   
.. py:function:: block\.decompile(ea)
   
   (UNSTABLE) Returns the decompiled code of the basic block at the address ``ea``.
   
   :param ea: the address of the basic block to decompile
   :type ea: int or long
   
.. py:function:: block\.disassemble(\*\*options)
   
   Returns the disassembly of the basic block at the current address.
   
   Aliases: :py:func:`function.block.disasm<block\.disassemble>`
   
   :param \*\*options: any options to pass to :py:obj:`database.disassemble`
   
.. py:function:: block\.disassemble(ea, \*\*options)
   
   Returns the disassembly of the basic block at the address ``ea``.
   
   Aliases: :py:func:`function.block.disasm<block\.disassemble>`
   
   :param ea: the address of the basic block to disassemble
   :type ea: int or long
   :param \*\*options: any options to pass to :py:obj:`database.disassemble`
   
.. py:function:: block\.disassemble(bounds, \*\*options)
   
   Returns the disassembly of the basic block identified by ``bounds``.
   
   Aliases: :py:func:`function.block.disasm<block\.disassemble>`
   
   :param bounds: the boundaries of the basic block to disassemble
   :type bounds: tuple
   :param \*\*options: any options to pass to :py:obj:`database.disassemble`
   
.. py:function:: block\.disassemble(bb, \*\*options)
   
   Returns the disassembly of the basic block ``bb``.
   
   Aliases: :py:func:`function.block.disasm<block\.disassemble>`
   
   :param bb: the basic block to disassemble
   :type bb: idaapi.BasicBlock
   :param \*\*options: any options to pass to :py:obj:`database.disassemble`
   
.. py:function:: block\.id()
   
   Return the block id of the current address in the current function.
   
.. py:function:: block\.id(ea)
   
   Return the block id of address ``ea`` in the current function.
   
   :param ea: the address of the basic block to return the id for
   :type ea: int or long
   
.. py:function:: block\.id(func, ea)
   
   Return the block id of address ``ea`` in the function ``func``.
   
   :param func: the function containing the basic block
   :param ea: the address of the basic block to return the id for
   :type ea: int or long
   
.. py:function:: block\.id(bb)
   
   Return the block id of the basic block ``bb``.
   
   :param bb: the basic block to return the id for
   :type bb: idaapi.BasicBlock
   
.. py:function:: block\.id(bounds)
   
   Return the block id of the basic block identified by ``bounds``.
   
   :param bounds: the boundaries of the basic block to return the id for
   :type bounds: tuple
   
.. py:function:: block\.iterate()
   
   Yield all the addresses in the current basic block.
   
.. py:function:: block\.iterate(ea)
   
   Yield all the addresses in the basic block at address ``ea``.
   
   :param ea: the address of the basic block to iterate through
   :type ea: int or long
   
.. py:function:: block\.iterate(bounds)
   
   Yield all the addresses in the basic block identified by ``bounds``.
   
   :param bounds: the boundaries of the basic block to iterate through
   :type bounds: tuple
   
.. py:function:: block\.iterate(bb)
   
   Yield all the addresses in the basic block ``bb``.
   
   :param bb: the basic block to iterate through
   :type bb: idaapi.BasicBlock
   
.. py:function:: block\.offset()
   
   Return the offset from the base of the database for the basic block at the current address.
   
.. py:function:: block\.offset(ea)
   
   Return the offset from the base of the database for the basic block at the address ``ea``.
   
   :param ea: the address of the basic block to return the offset of
   :type ea: int or long
   
.. py:function:: block\.offset(ea, offset)
   
   Return the offset from the base of the database for the basic block at address ``ea`` and add the provided ``offset`` to it.
   
   :param ea: the address of the basic block to return the offset of
   :type ea: int or long
   :param offset: the amount to add to the returned offset
   :type offset: int or long
   
.. py:function:: block\.read()
   
   Return all the bytes contained in the current basic block.
   
.. py:function:: block\.read(ea)
   
   Return all the bytes contained in the basic block at address ``ea``.
   
   :param ea: the address of the basic block to return bytes for
   :type ea: int or long
   
.. py:function:: block\.read(bounds)
   
   Return all the bytes contained in the basic block identified by ``bounds``.
   
   :param bounds: the boundaries of the basic block to return bytes for
   :type bounds: tuple
   
.. py:function:: block\.read(bb)
   
   Return all the bytes contained in the basic block ``bb``.
   
   :param bb: the basic block to return bytes for
   :type bb: idaapi.BasicBlock
   
.. py:function:: block\.register(reg, \*regs, \*\*modifiers)
   
   Yield each ``(address, opnum, state)`` within the current block that uses ``reg`` or any one of the registers in ``regs``.
   
   :param reg: a register of some kind
   :type reg: str or register_t
   :param \*regs: any other registers to match for
   :param \*\*modifiers: if ``write`` or ``read`` is true, then only return addresses where the specified registers are written to or read from (respectively)
   
.. py:function:: block\.register(ea, reg, \*regs, \*\*modifiers)
   
   Yield each ``(address, opnum, state)`` within the block containing ``ea`` that uses ``reg`` or any one of the registers in ``regs``.
   
   :param ea: the address belonging to the basic block to identify registers in
   :type ea: int or long
   :param reg: a register of some kind
   :type reg: str or register_t
   :param \*regs: any other registers to match for
   :param \*\*modifiers: if ``write`` or ``read`` is true, then only return addresses where the specified registers are written to or read from (respectively)
   
.. py:function:: block\.register(bounds, reg, \*regs, \*\*modifiers)
   
   Yield each ``(address, opnum, state)`` within the block identified by ``bounds`` that uses ``reg`` or any one of the registers in ``regs``.
   
   :param bounds: the boundaries of the basic block to identify registers in
   :type bounds: tuple
   :param reg: a register of some kind
   :type reg: str or register_t
   :param \*regs: any other registers to match for
   :param \*\*modifiers: if ``write`` or ``read`` is true, then only return addresses where the specified registers are written to or read from (respectively)
   
.. py:function:: block\.register(bb, reg, \*regs, \*\*modifiers)
   
   Yield each ``(address, opnum, state)`` within the block ``bb`` that uses ``reg`` or any one of the registers in ``regs``.
   
   If the keyword ``write`` is true, then only return the result if it's writing to the register.
   
   :param bb: the basic block to identify registers in
   :type bb: idaapi.BasicBlock
   :param reg: a register of some kind
   :type reg: str or register_t
   :param \*regs: any other registers to match for
   :param \*\*modifiers: if ``write`` or ``read`` is true, then only return addresses where the specified registers are written to or read from (respectively)
   
.. py:function:: block\.top()
   
   Return the top address of the basic block at the current address.
   
   Aliases: :py:func:`function.block.addr<block\.top>`, :py:func:`function.block.address<block\.top>`
   
.. py:function:: block\.top(ea)
   
   Return the top address of the basic block at address ``ea``.
   
   Aliases: :py:func:`function.block.addr<block\.top>`, :py:func:`function.block.address<block\.top>`
   
   :param ea: the address belonging to the basic block to return the top address for
   :type ea: int or long
   
.. py:function:: block\.top(bb)
   
   Return the top address of the basic block ``bb``.
   
   Aliases: :py:func:`function.block.addr<block\.top>`, :py:func:`function.block.address<block\.top>`
   
   :param bb: the basic block to return the top address for
   :type bb: idaapi.BasicBlock
   
.. py:function:: block\.top(bounds)
   
   Return the top address of the basic block identified by ``bounds``.
   
   Aliases: :py:func:`function.block.addr<block\.top>`, :py:func:`function.block.address<block\.top>`
   
   :param bounds: the boundaries of the basic block to return the top address for
   :type bounds: tuple
   
.. _ns-function-blocks:

***************
function.blocks
***************

This namespace is for interacting with all of the basic blocks within
the specified function. By default this namespace will yield the
boundaries of each basic block defined within the function.

This namespace provides a small number of utilities that can be
used to extract the basic blocks of a function and convert them
into a flow-graph such as :py:obj:`idaapi.FlowChart`, or a digraph as used
by the :py:obj:`networkx` module.

Due to :py:obj:`idaapi.FlowChart` and networkx's digraph being used so
often, these functions are exported globally as :py:obj:`function.flowchart`
and :py:obj:`function.digraph`.

Some examples of this namespace's usage::

    > for bb in function.blocks(calls=False): ...
    > chart = function.blocks.flowchart(ea)
    > G = function.blocks.graph()

.. py:function:: blocks(\*\*external)
   
   Return the bounds of each basic block for the current function.
   
   :param \*\*external: a boolean specifying to include external blocks in the blocks that are returned
   
.. py:function:: blocks(func, \*\*external)
   
   Returns the bounds of each basic block for the function ``func``.
   
   :param func: the function to return the basic blocks for
   :param \*\*external: a boolean specifying to include external blocks in the blocks that are returned
   
.. py:function:: blocks(bounds, \*\*external)
   
   Return each basic block contained within the specified ``bounds``.
   
   :param bounds: the boundaries to use when constraining the returned list of basic blocks
   :type bounds: tuple
   :param \*\*external: a boolean specifying to include external blocks in the blocks that are returned
   
.. py:function:: blocks(left, right, \*\*external)
   
   Returns each basic block contained between the addresses ``left`` and ``right``.
   
   If ``external`` is true, then include all blocks that are a branch target despite being outside the function boundaries.
   If ``split`` is false, then do not allow a call instruction to split a block.
   
   :param left: the top address of the basic block
   :param right: the bottom address of the basic block
   :param \*\*external: a boolean specifying to include external blocks in the blocks that are returned
   
.. py:function:: blocks\.at(\*\*flags)
   
   Return the :py:obj:`idaapi.BasicBlock` at the current address in the current function.
   
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart
   
.. py:function:: blocks\.at(ea, \*\*flags)
   
   Return the :py:obj:`idaapi.BasicBlock` of address ``ea`` in the current function.
   
   :param ea: the address of the basic block to return
   :type ea: int or long
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart
   
.. py:function:: blocks\.at(func, ea, \*\*flags)
   
   Return the :py:obj:`idaapi.BasicBlock` in function ``func`` at address ``ea``.
   
   :param func: the function containing the basic block
   :param ea: the address of the basic block to return
   :type ea: int or long
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart
   
.. py:function:: blocks\.at(func, ea, flags)
   
   Return the :py:obj:`idaapi.BasicBlock` with the specified ``flags`` (:py:obj:`idaapi.FC_\*`) for function ``func`` at address ``ea``.
   
   :param func: the function containing the basic block
   :param ea: the address of the basic block to return
   :type ea: int or long
   :param flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart
   :type flags: int or long
   
.. py:function:: blocks\.at(func, bb)
   
   Return the :py:obj:`idaapi.BasicBlock` in function ``func`` identifed by ``bb``.
   
   :param func: the function containing the basic block
   :param bb: the ``idaapi.BasicBlock`` containing the boundaries to match
   :type bb: idaapi.BasicBlock
   
.. py:function:: blocks\.digraph()
   
   Return a :py:obj:`networkx.DiGraph` of the function at the current address.
   
   Aliases: :py:func:`function.blocks.graph<blocks\.digraph>`, :py:func:`function.graph<blocks\.digraph>`, :py:func:`function.digraph<blocks\.digraph>`
   
.. py:function:: blocks\.digraph(func, \*\*flags)
   
   Return a :py:obj:`networkx.DiGraph` of the function ``func``.
   
   Requires the :py:obj:`networkx` module in order to build the graph.
   
   Aliases: :py:func:`function.blocks.graph<blocks\.digraph>`, :py:func:`function.graph<blocks\.digraph>`, :py:func:`function.digraph<blocks\.digraph>`
   
   :param func: the function to return a graph for
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart
   
.. py:function:: blocks\.flowchart(\*\*flags)
   
   Return an :py:obj:`idaapi.FlowChart` object for the current function.
   
   Aliases: :py:func:`function.flowchart<blocks\.flowchart>`
   
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart
   
.. py:function:: blocks\.flowchart(func, \*\*flags)
   
   Return an :py:obj:`idaapi.FlowChart` object for the function ``func``.
   
   Aliases: :py:func:`function.flowchart<blocks\.flowchart>`
   
   :param func: the function to return the flowchart for
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart
   
.. py:function:: blocks\.flowchart(func, flags)
   
   Return an :py:obj:`idaapi.FlowChart` object built with the specified ``flags`` for the function ``func``.
   
   Aliases: :py:func:`function.flowchart<blocks\.flowchart>`
   
   :param func: the function to return the flowchart for
   :param flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart
   :type flags: int or long
   
.. py:function:: blocks\.iterate(\*\*external)
   
   Return each :py:obj:`idaapi.BasicBlock` for the current function.
   
   :param \*\*external: a boolean specifying to include external blocks in the blocks that are returned
   
.. py:function:: blocks\.iterate(func, \*\*external)
   
   Returns each :py:obj:`idaapi.BasicBlock` for the function ``func``.
   
   If ``external`` is true, then include all blocks that are a branch target despite being outside the function boundaries.
   If ``split`` is false, then do not allow a call instruction to split a block.
   
   :param func: the function containing the basic blocks to yield
   :param \*\*external: a boolean specifying to include external blocks in the blocks that are returned
   
.. py:function:: blocks\.iterate(func, flags, \*\*silent)
   
   Returns each :py:obj:`idaapi.BasicBlock` from the flowchart built with the specified ``flags`` (:py:obj:`idaapi.FC_\*`) for the function ``func``.
   
   :param func: the function containing the basic blocks to yield
   :param flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart
   :type flags: int or long
   :param \*\*silent: a boolean specifying to exclude warnings about blocks that are outside the function
   
.. py:function:: blocks\.moonwalk(\*\*flags)
   
   Traverse each of the predecessor blocks for the current function starting with the block at the current address.
   
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart the block comes from
   
.. py:function:: blocks\.moonwalk(ea, \*\*flags)
   
   Traverse each of the predecessor blocks for a function starting with the block at the address ``ea``.
   
   :param ea: the address of the block to start at
   :type ea: int or long
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart the block comes from
   
.. py:function:: blocks\.moonwalk(func, ea, \*\*flags)
   
   Traverse each of the predecessor blocks from the block at address ``ea`` belonging to the function ``func``.
   
   :param func: the function containing the block to traverse the predecessors of
   :param ea: the address of the block to start at
   :type ea: int or long
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart the block comes from
   
.. py:function:: blocks\.moonwalk(bb)
   
   Traverse each of the predecessor blocks from the :py:obj:`idaapi.BasicBlock` identified by ``bb``.
   
   :param bb: the ``idaapi.BasicBlock`` to traverse the predecessors of
   :type bb: idaapi.BasicBlock
   
.. py:function:: blocks\.subgraph(start, exits)
   
   Return a :py:obj:`networkx.DiGraph` subgraph of the current function from address ``start`` and terminating at any address in ``exits``.
   
   :param start: the address of the basic block to start from
   :type start: int or long
   :param exits: the addresses of basic blocks to stop at
   :type exits: int or long or list or tuple or set
   
.. py:function:: blocks\.subgraph(func, start, exits)
   
   Return a :py:obj:`networkx.DiGraph` subgraph of the function ``func`` from address ``start`` and terminating at any address in ``exits``.
   
   Requires the :py:obj:`networkx` module in order to build the graph.
   
   :param func: the function to return the graph from
   :param start: the address of the basic block to start from
   :type start: int or long
   :param exits: the addresses of basic blocks to stop at
   :type exits: int or long or list or tuple or set
   
.. py:function:: blocks\.traverse(\*\*flags)
   
   Traverse each of the successor blocks starting from the beginning of the current function.
   
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart to traverse
   
.. py:function:: blocks\.traverse(predicate, \*\*flags)
   
   Traverse the blocks from the beginning of the current function until the callable ``predicate`` returns no more elements.
   
   :param predicate: a callable (such as :py:obj:`block.before` or :py:obj:`block.after`) returning the blocks to choose from
   :type predicate: callable
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart to traverse
   
.. py:function:: blocks\.traverse(func, predicate, \*\*flags)
   
   Traverse the blocks from the beginning of function ``func`` until the callable ``predicate`` returns no more elements.
   
   :param func: the function to traverse
   :param predicate: a callable (such as :py:obj:`block.before` or :py:obj:`block.after`) returning the blocks to choose from
   :type predicate: callable
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart to traverse
   
.. py:function:: blocks\.traverse(func, ea, predicate, \*\*flags)
   
   Traverse the blocks of function ``func`` from the block given by ``ea`` until the callable ``predicate`` returns no more elements.
   
   :param func: the function containing the block
   :param ea: the address of the block to start at
   :type ea: int or long
   :param predicate: a callable (such as :py:obj:`block.before` or :py:obj:`block.after`) returning the blocks to choose from
   :type predicate: callable
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart the block comes from
   
.. py:function:: blocks\.traverse(bb, predicate)
   
   Traverse the blocks of function ``func`` from the :py:obj:`idaapi.BasicBlock` given by ``bb`` until the callable ``predicate`` returns no more elements.
   
   :param bb: the ``idaapi.BasicBlock`` to start at
   :type bb: idaapi.BasicBlock
   :param predicate: a callable (such as :py:obj:`block.before` or :py:obj:`block.after`) returning the blocks to choose from
   :type predicate: callable
   
.. py:function:: blocks\.walk(\*\*flags)
   
   Traverse each of the successor blocks starting from the beginning of the current function.
   
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart to traverse
   
.. py:function:: blocks\.walk(func, \*\*flags)
   
   Traverse each of the successor blocks starting from the beginning of the function ``func``.
   
   :param func: the function containing to traverse the successors of
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart to traverse
   
.. py:function:: blocks\.walk(func, ea, \*\*flags)
   
   Traverse each of the successor blocks of the block identified by ``ea`` belonging to the function ``func``.
   
   :param func: the function containing the block to traverse the successors of
   :param ea: the address of the block to start at
   :type ea: int or long
   :param \*\*flags: the flags from ``idaapi.FC_\*`` to use when building the flowchart the block comes from
   
.. py:function:: blocks\.walk(bb)
   
   Traverse each of the successor blocks from the :py:obj:`idaapi.BasicBlock` identified by ``bb``.
   
   :param bb: the ``idaapi.BasicBlock`` to traverse the successors of
   :type bb: idaapi.BasicBlock
   
.. _ns-function-chunk:

**************
function.chunk
**************

This namespace is for interacting with a specific chunk belonging
to a function. By default this namespace will return the bounds of
the chunk containing the requested address.

The functions in this namespace can be used as::

    > l, r = function.chunk(ea)
    > ea = function.chunk.top()
    > function.chunk.add(function.by(), 0x401000, 0x402000)
    > function.chunk.remove(ea)

.. py:function:: chunk()
   
   Return a tuple containing the bounds of the function chunk at the current address.
   
.. py:function:: chunk(ea)
   
   Return a tuple containing the bounds of the function chunk at the address ``ea``.
   
   :param ea: the address containing the chunk to return
   :type ea: int or long
   
.. py:function:: chunk\.add(start)
   
   Add the chunk starting at the address ``start`` to the current function.
   
   Aliases: :py:func:`function.add_chunk<chunk\.add>`
   
   :param start: the starting address of the chunk to add
   :type start: int or long
   
.. py:function:: chunk\.add(bounds)
   
   Add the chunk specified by ``bounds`` to the current function.
   
   Aliases: :py:func:`function.add_chunk<chunk\.add>`
   
   :param bounds: the boundaries of the chunk to add
   :type bounds: tuple
   
.. py:function:: chunk\.add(func, ea)
   
   Add the chunk starting at address ``ea`` to the function ``func``.
   
   Aliases: :py:func:`function.add_chunk<chunk\.add>`
   
   :param func: the function to add the chunk to
   :param ea: the starting address of the chunk to add to the function
   :type ea: int or long
   
.. py:function:: chunk\.add(func, start, end)
   
   Add the chunk from the address ``start`` until ``end`` to the function ``func``.
   
   Aliases: :py:func:`function.add_chunk<chunk\.add>`
   
   :param func: the function to add the chunk to
   :param start: the starting address of the chunk to add to the function
   :type start: int or long
   :param end: the ending address of the chunk
   :type end: int or long
   
.. py:function:: chunk\.add(func, bounds)
   
   Add the chunk specified by ``bounds`` to the function ``func``.
   
   Aliases: :py:func:`function.add_chunk<chunk\.add>`
   
   :param func: the function to add the chunk to
   :param bounds: the boundaries of the chunk to add to the function
   :type bounds: tuple
   
.. py:function:: chunk\.address()
   
   Return the top address of the function chunk containing the current address.
   
.. py:function:: chunk\.address(ea)
   
   Return the top address of the function chunk containing the address ``ea``.
   
   :param ea: the address of the chunk
   :type ea: int or long
   
.. py:function:: chunk\.address(ea, offset)
   
   Return the address of the function chunk containing the address ``ea`` and add the provided ``offset`` to it.
   
   :param ea: the address of the chunk
   :type ea: int or long
   :param offset: the offset to add to the chunk address
   :type offset: int or long
   
.. py:function:: chunk\.at()
   
   Return an :py:obj:`idaapi.range_t` describing the bounds of the current function chunk.
   
.. py:function:: chunk\.at(ea)
   
   Return an :py:obj:`idaapi.range_t` describing the bounds of the function chunk at the address ``ea``.
   
   :param ea: the address of the chunk to return
   :type ea: int or long
   
.. py:function:: chunk\.at(func, ea)
   
   Return an :py:obj:`idaapi.range_t` describing the bounds of the function chunk belonging to ``func`` at the address ``ea``.
   
   :param func: the function containing the chunk
   :param ea: the address of the chunk to return
   :type ea: int or long
   
.. py:function:: chunk\.bottom()
   
   Return the bottom address of the chunk at the current address.
   
.. py:function:: chunk\.bottom(ea)
   
   Return the bottom address of the chunk at address ``ea``.
   
   :param ea: the address of the chunk
   :type ea: int or long
   
.. py:function:: chunk\.bottom(ea, address)
   
   Change the bottom address of the chunk at address ``ea`` to the specified ``address``.
   
   :param ea: the address of the chunk to modify
   :type ea: int or long
   :param address: the new address to set the bottom of the chunk with
   :type address: int or long
   
.. py:function:: chunk\.iterate()
   
   Iterate through all the instructions for the function chunk containing the current address.
   
.. py:function:: chunk\.iterate(ea)
   
   Iterate through all the instructions for the function chunk containing the address :py:obj:`ea`.
   
   :param ea: the address belonging to the function chunk to iterate through
   :type ea: int or long
   
.. py:function:: chunk\.offset()
   
   Return the offset from the base of the database for the current function chunk.
   
.. py:function:: chunk\.offset(ea)
   
   Return the offset from the base of the database for the function chunk containing the address ``ea``.
   
   :param ea: the address of the chunk to return the offset of
   :type ea: int or long
   
.. py:function:: chunk\.offset(ea, offset)
   
   Return the offset from the base of the database for the function chunk containing the address ``ea`` and add the provided ``offset`` to it.
   
   :param ea: the address of the chunk to return the offset of
   :type ea: int or long
   :param offset: the offset to add to the result
   
.. py:function:: chunk\.owner()
   
   Return the primary owner of the function chunk containing the current address.
   
.. py:function:: chunk\.owner(ea)
   
   Return the primary owner of the function chunk containing the address specified by ``ea``.
   
   :param ea: the address of the chunk to return the owner of
   :type ea: int or long
   
.. py:function:: chunk\.owner(bounds)
   
   Return the primary owner of the function chunk specified by ``bounds``.
   
   :param bounds: the boundaries of the chunk to return the owner of
   :type bounds: tuple
   
.. py:function:: chunk\.owner(ea, func)
   
   Set the primary owner of the chunk at ``ea`` to the function ``func``.
   
   :param ea: the address of the chunk to change the owner of
   :type ea: int or long
   :param func: the desired function that should own the chunk
   
.. py:function:: chunk\.owner(bounds, func)
   
   Set the primary owner of the chunk specified by ``bounds`` to the function ``func``.
   
   :param bounds: the boundaries of the chunk to change the owner of
   :type bounds: tuple
   :param func: the desired function that should own the chunk
   
.. py:function:: chunk\.owners()
   
   Yield each of the owners which have the current function chunk associated with it.
   
.. py:function:: chunk\.owners(ea)
   
   Yield each of the owners which have the function chunk containing the address ``ea`` associated with it.
   
   :param ea: the address of the chunk to return each of the functions for
   :type ea: int or long
   
.. py:function:: chunk\.points()
   
   Iterate through the current function chunk and yield each address and stack delta that was calculated.
   
.. py:function:: chunk\.points(ea)
   
   Iterate through the function chunk containing the address ``ea`` and yield each address and stack delta that was calculated.
   
   :param ea: the address of the chunk to yield each of the stack points for
   :type ea: int or long
   
.. py:function:: chunk\.points(func, ea)
   
   Iterate through the chunk belonging to the function ``func`` and containing the address ``ea`` in order to yield each address and stack delta that was calculated.
   
   :param func: the function containing the chunk
   :param ea: the address of the chunk to yield each of the stack points for
   :type ea: int or long
   
.. py:function:: chunk\.register(reg, \*regs, \*\*modifiers)
   
   Yield each ``(address, opnum, state)`` within the function chunk containing the current address which uses ``reg`` or any one of the registers in ``regs``.
   
   :param reg: a register of some kind
   :type reg: str or register_t
   :param \*regs: any other registers to match for
   :param \*\*modifiers: if ``write`` or ``read`` is true, then only return addresses where the specified registers are written to or read from (respectively)
   
.. py:function:: chunk\.register(ea, reg, \*regs, \*\*modifiers)
   
   Yield each ``(address, opnum, state)`` within the function chunk containing the address ``ea`` which uses ``reg`` or any one of the registers in ``regs``.
   
   If the keyword ``write`` is True, then only return the result if it's writing to the register.
   
   :param ea: the address belonging to the function chunk to identify registers in
   :param reg: a register of some kind
   :type reg: str or register_t
   :param \*regs: any other registers to match for
   :param \*\*modifiers: if ``write`` or ``read`` is true, then only return addresses where the specified registers are written to or read from (respectively)
   
.. py:function:: chunk\.remove()
   
   Remove the chunk containing the current address from its function.
   
   Aliases: :py:func:`function.remove_chunk<chunk\.remove>`
   
.. py:function:: chunk\.remove(ea)
   
   Remove the chunk at ``ea`` from its function.
   
   Aliases: :py:func:`function.remove_chunk<chunk\.remove>`
   
   :param ea: the address of the chunk to remove
   :type ea: int or long
   
.. py:function:: chunk\.remove(bounds)
   
   Remove the chunk specified by ``bounds`` from its function.
   
   Aliases: :py:func:`function.remove_chunk<chunk\.remove>`
   
   :param bounds: a tuple describing the boundaries of the chunk to remove
   :type bounds: tuple
   
.. py:function:: chunk\.remove(func, ea)
   
   Remove the chunk at ``ea`` from the function ``func``.
   
   Aliases: :py:func:`function.remove_chunk<chunk\.remove>`
   
   :param func: the function containing the chunk
   :param ea: the address of the chunk to remove from the function
   :type ea: int or long
   
.. py:function:: chunk\.remove(func, bounds)
   
   Remove the chunk specified by ``bounds`` from the function ``func``.
   
   Aliases: :py:func:`function.remove_chunk<chunk\.remove>`
   
   :param func: the function containing the chunk
   :param bounds: a tuple describing the boundaries of the chunk to remove
   :type bounds: tuple
   
.. py:function:: chunk\.top()
   
   Return the top address of the chunk at the current address.
   
.. py:function:: chunk\.top(ea)
   
   Return the top address of the chunk at address ``ea``.
   
   :param ea: the address of the chunk
   :type ea: int or long
   
.. py:function:: chunk\.top(ea, address)
   
   Change the top address of the chunk at address ``ea`` to the specified ``address``.
   
   :param ea: the address of the chunk to modify
   :type ea: int or long
   :param address: the new address to set the top of the chunk with
   :type address: int or long
   
.. _ns-function-chunks:

***************
function.chunks
***************

This namespace is for interacting with the different chunks
associated with a function. By default this namespace will yield
the boundaries of each chunk associated with a function.

Some of the ways to use this namespace are::

    > for l, r in function.chunks(): ...
    > for ea in function.chunks.iterate(ea): ...

.. py:function:: chunks()
   
   Yield the bounds of each chunk within current function.
   
.. py:function:: chunks(func)
   
   Yield the bounds of each chunk for the function ``func``.
   
   :param func: the function to yield the chunks for
   
.. py:function:: chunks\.at()
   
   Return an :py:obj:`idaapi.range_t` describing the bounds of the current function chunk.
   
.. py:function:: chunks\.at(ea)
   
   Return an :py:obj:`idaapi.range_t` describing the bounds of the function chunk at the address ``ea``.
   
   :param ea: the address belonging to the chunk to return
   :type ea: int or long
   
.. py:function:: chunks\.at(func, ea)
   
   Return an :py:obj:`idaapi.range_t` describing the bounds of the function chunk belonging to ``func`` at the address ``ea``.
   
   :param func: the function containing the chunk
   :param ea: the address belonging to the chunk to return
   :type ea: int or long
   
.. py:function:: chunks\.contains()
   
   Returns True if the current function contains the current address in any of its chunks.
   
   Aliases: :py:func:`function.contains<chunks\.contains>`
   
.. py:function:: chunks\.contains(ea)
   
   Returns True if the current function contains the address ``ea`` in any of its chunks.
   
   Aliases: :py:func:`function.contains<chunks\.contains>`
   
   :param ea: the address of the chunk to check
   :type ea: int or long
   
.. py:function:: chunks\.contains(func, ea)
   
   Returns True if the function ``func`` contains the address ``ea`` in any of its chunks.
   
   Aliases: :py:func:`function.contains<chunks\.contains>`
   
   :param func: the function to check the chunk against
   :param ea: the address of the chunk to check
   :type ea: int or long
   
.. py:function:: chunks\.iterate()
   
   Iterate through all the instructions for each chunk in the current function.
   
   Aliases: :py:func:`function.iterate<chunks\.iterate>`
   
.. py:function:: chunks\.iterate(func)
   
   Iterate through all the instructions for each chunk in the function ``func``.
   
   Aliases: :py:func:`function.iterate<chunks\.iterate>`
   
   :param func: the function to iterate through
   
.. py:function:: chunks\.register(reg, \*regs, \*\*modifiers)
   
   Yield each ``(address, opnum, state)`` within the current function that uses ``reg`` or any one of the registers in ``regs``.
   
   Aliases: :py:func:`function.register<chunks\.register>`
   
   :param reg: a register of some kind
   :type reg: str or register_t
   :param \*regs: any other registers to match for
   :param \*\*modifiers: if ``write`` or ``read`` is true, then only return addresses where the specified registers are written to or read from (respectively)
   
.. py:function:: chunks\.register(func, reg, \*regs, \*\*modifiers)
   
   Yield each ``(address, opnum, state)`` within the function ``func`` that uses ``reg`` or any one of the registers in ``regs``.
   
   If the keyword ``write`` is True, then only return the result if it's writing to the register.
   
   Aliases: :py:func:`function.register<chunks\.register>`
   
   :param func: the function to identify registers in
   :param reg: a register of some kind
   :type reg: str or register_t
   :param \*regs: any other registers to match for
   :param \*\*modifiers: if ``write`` or ``read`` is true, then only return addresses where the specified registers are written to or read from (respectively)
   
.. _ns-function-frame:

**************
function.frame
**************

This namespace is for getting information about the selected
function's frame. By default, this namespace will return a
:py:obj:`structure_t` representing the frame belonging to the specified
function.

Some ways of using this can be::

    > print( function.frame() )
    > print( hex(function.frame.id(ea)) )
    > sp = function.frame.delta(ea)

.. py:function:: frame()
   
   Return the frame of the current function.
   
.. py:function:: frame(func)
   
   Return the frame of the function ``func``.
   
   :param func: the function containing the frame to return
   
.. py:function:: frame\.delta()
   
   Returns the stack delta for the current address within its function.
   
   Aliases: :py:func:`function.get_spdelta<frame\.delta>`
   
.. py:function:: frame\.delta(ea)
   
   Returns the stack delta for the address ``ea`` within its given function.
   
   Aliases: :py:func:`function.get_spdelta<frame\.delta>`
   
   :param ea: the address to return the stack delta for
   :type ea: int or long
   
.. py:function:: frame\.delta(func, ea)
   
   Returns the stack delta for the address ``ea`` within the function ``func``.
   
   Aliases: :py:func:`function.get_spdelta<frame\.delta>`
   
   :param func: the function to get the stack delta from
   :param ea: the address to return the stack delta for
   :type ea: int or long
   
.. py:function:: frame\.id()
   
   Returns the structure id for the current function's frame.
   
   Aliases: :py:func:`function.get_frameid<frame\.id>`
   
.. py:function:: frame\.id(func)
   
   Returns the structure id for the function ``func``.
   
   Aliases: :py:func:`function.get_frameid<frame\.id>`
   
   :param func: the function to return the frame id for
   
.. py:function:: frame\.new()
   
   Add an empty frame to the current function.
   
.. py:function:: frame\.new(lvars, args)
   
   Add a frame to the current function using the sizes specified by ``lvars`` for local variables, and ``args`` for arguments.
   
   :param lvars: the number of bytes to allocate for local variables
   :type lvars: int or long
   :param args: the number of bytes to allocate for arguments
   :type args: int or long
   
.. py:function:: frame\.new(lvars, regs, args)
   
   Add a frame to the current function using the sizes specified by ``lvars`` for local variables, ``regs`` for frame registers, and ``args`` for arguments.
   
   :param lvars: the number of bytes to allocate for local variables
   :type lvars: int or long
   :param regs: the number of bytes to allocate for registers
   :type regs: int or long
   :param args: the number of bytes to allocate for arguments
   :type args: int or long
   
.. py:function:: frame\.new(func, lvars, regs, args)
   
   Add a frame to the function ``func`` using the sizes specified by ``lvars`` for local variables, ``regs`` for frame registers, and ``args`` for arguments.
   
   When specifying the size of the registers (``regs``) the size of the saved instruction pointer must also be included.
   
   :param func: the function to add the frame to
   :param lvars: the number of bytes to allocate for local variables
   :type lvars: int or long
   :param regs: the number of bytes to allocate for registers
   :type regs: int or long
   :param args: the number of bytes to allocate for arguments
   :type args: int or long
   
.. _ns-function-frame-args:

^^^^^^^^^^^^^^^^^^^
function.frame.args
^^^^^^^^^^^^^^^^^^^

Aliases: :ref:`function.frame.arguments<ns-function-frame-args>`

This namespace is for returning information about the arguments
within a function's frame. By default, this namespace will yield
each argument as a tuple containing the ``(offset, name, size)``.

Some ways of using this are::

    > print( function.frame.args(f) )
    > print( function.frame.args.registers(f) )
    > print( function.frame.args.size(f) )
    > print( function.frame.args.location(ea) )

.. py:function:: frame\.args()
   
   Yield the ``(offset, name, size)`` of each argument belonging to the current function.
   
.. py:function:: frame\.args(func)
   
   Yield the ``(offset, name, size)`` of each argument belonging to the function ``func``.
   
   :param func: the function containing the arguments to yield
   
.. py:function:: frame\.args\.iterate()
   
   Yield the ``(member, type, name)`` associated with the arguments for the current function.
   
.. py:function:: frame\.args\.iterate(func)
   
   Yield the ``(member, type, name)`` associated with the arguments for the function ``func``.
   
   :param func: the function containing the argument information to yield
   
.. py:function:: frame\.args\.location()
   
   Return the list of address locations for each of the parameters that are passed to the function call at the current address.
   
   Aliases: :py:func:`function.frame.args.locations<frame\.args\.location>`
   
.. py:function:: frame\.args\.location(ea)
   
   Return the list of address locations for each of the parameters that are passed to the function call at ``ea``.
   
   Aliases: :py:func:`function.frame.args.locations<frame\.args\.location>`
   
   :param ea: the address of the reference to the function
   :type ea: int or long
   
.. py:function:: frame\.args\.location(ea, index)
   
   Return the initialization address for the parameter at ``index`` for the function call at ``ea``.
   
   Aliases: :py:func:`function.frame.args.locations<frame\.args\.location>`
   
   :param ea: the address of the reference to the function
   :type ea: int or long
   :param index: the index of the parameter to return the address of
   :type index: int or long
   
.. py:function:: frame\.args\.registers()
   
   Return the register information associated with the arguments of the current function.
   
   Aliases: :py:func:`function.frame.args.regs<frame\.args\.registers>`
   
.. py:function:: frame\.args\.registers(func)
   
   Return the register information associated with the arguments of the function ``func``.
   
   Aliases: :py:func:`function.frame.args.regs<frame\.args\.registers>`
   
   :param func: the function containing the argument register information to return
   
.. py:function:: frame\.args\.size()
   
   Returns the size of the arguments for the current function.
   
   Aliases: :py:func:`function.get_args_size<frame\.args\.size>`
   
.. py:function:: frame\.args\.size(func)
   
   Returns the size of the arguments for the function ``func``.
   
   Aliases: :py:func:`function.get_args_size<frame\.args\.size>`
   
   :param func: the function containing the argument size to return
   
.. _ns-function-frame-lvars:

^^^^^^^^^^^^^^^^^^^^
function.frame.lvars
^^^^^^^^^^^^^^^^^^^^

Aliases: :ref:`function.frame.vars<ns-function-frame-lvars>`

This namespace provides information about the local variables
defined within a function's frame.

Some ways to get this information can be::

    > print( function.frame.lvars.size() )

.. py:function:: frame\.lvars()
   
   Yield the ``(offset, name, size)`` of each local variable relative to the stack pointer for the current function.
   
.. py:function:: frame\.lvars(func)
   
   Yield the ``(offset, name, size)`` of each local variable relative to the stack pointer for the function ``func``.
   
   :param func: the function containing the local variables to return
   
.. py:function:: frame\.lvars\.size()
   
   Returns the size of the local variables for the current function.
   
   Aliases: :py:func:`function.get_vars_size<frame\.lvars\.size>`
   
.. py:function:: frame\.lvars\.size(func)
   
   Returns the size of the local variables for the function ``func``.
   
   Aliases: :py:func:`function.get_vars_size<frame\.lvars\.size>`
   
   :param func: the function containing the local variable size to return
   
.. _ns-function-frame-regs:

^^^^^^^^^^^^^^^^^^^
function.frame.regs
^^^^^^^^^^^^^^^^^^^

This namespace provides information about the registers that
are saved when a function constructs its frame.

An example of using this namespace::

    > print( function.frame.regs.size(ea) )

.. py:function:: frame\.regs()
   
   Yield the ``(offset, name, size)`` of each saved register relative to the stack pointer of the current function.
   
.. py:function:: frame\.regs(func)
   
   Yield the ``(offset, name, size)`` of each saved register relative to the stack pointer of the function ``func``.
   
   :param func: the function containing the registers to return
   
.. py:function:: frame\.regs\.size()
   
   Returns the number of bytes occupied by the saved registers in the current function.
   
   Aliases: :py:func:`function.get_regs_size<frame\.regs\.size>`
   
.. py:function:: frame\.regs\.size(func)
   
   Returns the number of bytes occupied by the saved registers for the function ``func``.
   
   Aliases: :py:func:`function.get_regs_size<frame\.regs\.size>`
   
   :param func: the function containing the register size to return
   
.. _ns-function-type:

*************
function.type
*************

This namespace allows one to query type information about a
specified function. This allows one to get any attributes that IDA
or a user has applied to a function within the database. This alows
one to filter functions according to their particular attributes.

This namespace is aliased as :py:obj:`function.t`.

Some of the functions within this namespace are also aliased as
the following globals:

- :py:obj:`function.convention` - Interact with the calling convention (:py:obj:`idaapi.CM_CC_\*`) for a function's prototype.
- :py:obj:`function.result` - Interact with the result type associated with a function's prototype.

Some simple ways of getting information about a function::

    > print( function.type.has_noframe() )
    > for ea in filter(function.type.is_library, database.functions()): ...

.. py:function:: type()
   
   Return the type information for the current function as an :py:obj:`idaapi.tinfo_t`.
   
.. py:function:: type(info, \*\*guessed)
   
   Apply the type information in ``info`` to the current function.
   
   :param info: the type information to apply
   :type info: str or idaapi.tinfo_t
   :param \*\*guessed: a boolean describing whether the type is guessed by the disassembler or the user
   
.. py:function:: type(none)
   
   Remove the type information for the current function.
   
   :param none: the python value :py:obj:`None` which will remove the type information from the function
   :type none: None
   
.. py:function:: type(func)
   
   Return the type information for the function ``func`` as an :py:obj:`idaapi.tinfo_t`.
   
   :param func: the address or function to return the type information from
   :type func: int or long or idaapi.func_t
   
.. py:function:: type(func, info, \*\*guessed)
   
   Apply the :py:obj:`idaapi.tinfo_t` in ``info`` to the function ``func``.
   
   :param func: the address or function to apply the type information to
   :param info: the type information string to apply to the function
   :type info: idaapi.tinfo_t
   :param \*\*guessed: a boolean describing whether the type is guessed by the disassembler or the user
   
.. py:function:: type(func, info, \*\*guessed)
   
   Parse the type information string in ``info`` into an :py:obj:`idaapi.tinfo_t` and apply it to the function ``func``.
   
   :param func: the address or function to apply the type information to
   :param info: the :py:obj:`idaapi.tinfo_t` containing the type information to apply to the function
   :type info: str
   :param \*\*guessed: a boolean describing whether the type is guessed by the disassembler or the user
   
.. py:function:: type(func, none)
   
   Remove the type information for the function ``func``.
   
   :param func: the address or function to remove the type information from
   :param none: the python value :py:obj:`None` which will remove the type information from the function
   :type none: None
   
.. py:function:: type\.convention()
   
   Return the calling convention of the current function.
   
   Aliases: :py:func:`function.cc<type\.convention>`, :py:func:`function.convention<type\.convention>`, :py:func:`function.type.cc<type\.convention>`
   
.. py:function:: type\.convention(func)
   
   Return the calling convention of the function ``func``.
   
   The integer returned corresponds to one of the :py:obj:`idaapi.CM_CC_\*` constants.
   
   Aliases: :py:func:`function.cc<type\.convention>`, :py:func:`function.convention<type\.convention>`, :py:func:`function.type.cc<type\.convention>`
   
   :param func: the address or function to return the calling convention from
   
.. py:function:: type\.convention(func, convention)
   
   Set the calling convention used by the prototype for the function ``func`` to the specified ``convention`` string.
   
   Aliases: :py:func:`function.cc<type\.convention>`, :py:func:`function.convention<type\.convention>`, :py:func:`function.type.cc<type\.convention>`
   
   :param func: the address or function using the calling convention to modify
   :param convention: the calling convention to apply to the function prototype as a string
   :type convention: str
   
.. py:function:: type\.convention(func, convention)
   
   Set the calling convention used by the prototype for the function ``func`` to the specified ``convention``.
   
   Aliases: :py:func:`function.cc<type\.convention>`, :py:func:`function.convention<type\.convention>`, :py:func:`function.type.cc<type\.convention>`
   
   :param func: the address or function using the calling convention to modify
   :param convention: the calling convention to apply to the function specified as an :py:obj:`idaapi.CM_CC_MASK`
   :type convention: int or long
   
.. py:function:: type\.flags()
   
   Return the flags for the current function.
   
.. py:function:: type\.flags(func)
   
   Return the flags for the function ``func``.
   
   :param func: the function to return the flags of
   
.. py:function:: type\.flags(func, mask)
   
   Return the flags for the function ``func`` selected with the specified ``mask``.
   
   :param func: the function to return the flags of
   :param mask: a bitmask used to select the explicit flag bits to return
   :type mask: int or long
   
.. py:function:: type\.flags(func, mask, integer)
   
   Set the flags for the function ``func`` selected by the specified ``mask`` to the provided ``integer``.
   
   :param func: the function with the flags that are to be modified
   :param mask: a bitmask used to specify the explicit flags to set
   :type mask: int or long
   :param integer: the flags to set on the function
   :type integer: bool or int or long
   
.. py:function:: type\.has_frame()
   
   Return if the current function has a frame allocated to it.
   
   Aliases: :py:func:`function.type.frameQ<type\.has_frame>`
   
.. py:function:: type\.has_frame(func)
   
   Return if the function ``func`` has a frame allocated to it.
   
   Aliases: :py:func:`function.type.frameQ<type\.has_frame>`
   
   :param func: the function to check for the existence of a frame
   
.. py:function:: type\.has_frameptr()
   
   Return if the current function uses a frame pointer (register).
   
   Aliases: :py:func:`function.type.frameptrQ<type\.has_frameptr>`
   
.. py:function:: type\.has_frameptr(func)
   
   Return if the function ``func`` uses a frame pointer (register).
   
   Aliases: :py:func:`function.type.frameptrQ<type\.has_frameptr>`
   
   :param func: the function to check for the existence of a frame pointer
   
.. py:function:: type\.has_name()
   
   Return if the current function has a user-defined name.
   
   Aliases: :py:func:`function.type.nameQ<type\.has_name>`, :py:func:`function.type.customnameQ<type\.has_name>`, :py:func:`function.type.has_customname<type\.has_name>`
   
.. py:function:: type\.has_name(func)
   
   Return if the function ``func`` has a user-defined name.
   
   Aliases: :py:func:`function.type.nameQ<type\.has_name>`, :py:func:`function.type.customnameQ<type\.has_name>`, :py:func:`function.type.has_customname<type\.has_name>`
   
   :param func: the function to use when checking for a name
   
.. py:function:: type\.has_problem()
   
   Return if the current function has a problem associated with it.
   
   Aliases: :py:func:`function.type.problemQ<type\.has_problem>`
   
.. py:function:: type\.has_problem(func)
   
   Return if the function ``func`` has a problem associated with it.
   
   Aliases: :py:func:`function.type.problemQ<type\.has_problem>`
   
   :param func: the function to check for problems
   
.. py:function:: type\.has_problem(func, problem)
   
   Return if the function ``func`` has the specified ``problem`` associated with it.
   
   Aliases: :py:func:`function.type.problemQ<type\.has_problem>`
   
   :param func: the function to check for problems
   :param problem: the :py:obj:`idaapi.PR_` problem type representing the queue to search for problems in
   :type problem: int or long
   
.. py:function:: type\.has_prototype()
   
   Return a boolean describing whether the current function has a prototype associated with it.
   
   Aliases: :py:func:`function.type.has_typeinfo<type\.has_prototype>`, :py:func:`function.type.typeinfoQ<type\.has_prototype>`, :py:func:`function.type.prototypeQ<type\.has_prototype>`
   
.. py:function:: type\.has_prototype(func)
   
   Return a boolean describing whether the function ``func`` has a prototype associated with it.
   
   Aliases: :py:func:`function.type.has_typeinfo<type\.has_prototype>`, :py:func:`function.type.typeinfoQ<type\.has_prototype>`, :py:func:`function.type.prototypeQ<type\.has_prototype>`
   
   :param func: the address or function to check for the existence of a prototype
   
.. py:function:: type\.has_return()
   
   Return if the current function returns.
   
   Aliases: :py:func:`function.type.returnQ<type\.has_return>`
   
.. py:function:: type\.has_return(func)
   
   Return if the function ``func`` returns.
   
   Aliases: :py:func:`function.type.returnQ<type\.has_return>`
   
   :param func: the function to use when checking if it returns
   
.. py:function:: type\.hidden()
   
   Return a boolean describing whether the current function is hidden.
   
.. py:function:: type\.hidden(func)
   
   Return a boolean describing whether the function ``func`` is hidden.
   
   :param func: the function to return the hidden attribute from
   
.. py:function:: type\.hidden(func, boolean)
   
   Modify the attributes of the function ``func`` to set it as a hidden function depending on the value of ``boolean``.
   
   :param func: the function to modify the hidden attribute
   :param boolean: a boolean value representing whether the function is hidden or not
   
.. py:function:: type\.is_decompiled()
   
   Return if the current function has been decompiled.
   
   Aliases: :py:func:`function.type.decompiledQ<type\.is_decompiled>`
   
.. py:function:: type\.is_decompiled(func)
   
   Return if the function ``func`` has been decompiled.
   
   Aliases: :py:func:`function.type.decompiledQ<type\.is_decompiled>`
   
   :param func: the function to check if it is decompiled
   
.. py:function:: type\.is_far()
   
   Return a boolean describing whether the current function is considered a "far" function by IDA or the user.
   
   Aliases: :py:func:`function.type.farQ<type\.is_far>`
   
.. py:function:: type\.is_far(func)
   
   Return a boolean describing whether the function ``func`` is considered a "far" function by IDA or the user.
   
   Aliases: :py:func:`function.type.farQ<type\.is_far>`
   
   :param func: the function to use when checking if it is typically called from outside its segment
   
.. py:function:: type\.is_hidden()
   
   Return a boolean describing whether the current function is hidden.
   
   Aliases: :py:func:`function.type.hiddenQ<type\.is_hidden>`
   
.. py:function:: type\.is_hidden(func)
   
   Return a boolean describing whether the function ``func`` is hidden.
   
   Aliases: :py:func:`function.type.hiddenQ<type\.is_hidden>`
   
   :param func: the function to check for its visibility
   
.. py:function:: type\.is_library()
   
   Return a boolean describing whether the current function is considered a library function.
   
   Aliases: :py:func:`function.type.libraryQ<type\.is_library>`
   
.. py:function:: type\.is_library(func)
   
   Return a boolean describing whether the function ``func`` is considered a library function.
   
   Aliases: :py:func:`function.type.libraryQ<type\.is_library>`
   
   :param func: the function to use when checking if it is a library function
   
.. py:function:: type\.is_static()
   
   Return a boolean describing whether the current function is defined as a static function.
   
   Aliases: :py:func:`function.type.staticQ<type\.is_static>`
   
.. py:function:: type\.is_static(func)
   
   Return a boolean describing whether the function ``func`` is defined as a static function.
   
   Aliases: :py:func:`function.type.staticQ<type\.is_static>`
   
   :param func: the function to use when checking if it is a static function
   
.. py:function:: type\.is_thunk()
   
   Return a boolean describing whether the current function was determined to be a code thunk.
   
   Aliases: :py:func:`function.type.thunkQ<type\.is_thunk>`
   
.. py:function:: type\.is_thunk(func)
   
   Return a boolean describing whether the function ``func`` was determined to be a code thunk.
   
   Aliases: :py:func:`function.type.thunkQ<type\.is_thunk>`
   
   :param func: the function to use when checking if it is a code thunk
   
.. py:function:: type\.library()
   
   Return a boolean describing whether the current function is considered a library function.
   
.. py:function:: type\.library(func)
   
   Return a boolean describing whether the function ``func`` is considered a library function.
   
   :param func: the desired function to return the library attribute from
   
.. py:function:: type\.library(func, boolean)
   
   Modify the attributes of the function ``func`` to set it as a library function depending on the value of ``boolean``.
   
   :param func: the desired function to modify the attributes of
   :param boolean: a boolean value representing whether the function should be set as a library function or not
   
.. py:function:: type\.static()
   
   Return a boolean describing whether the current function is defined as a static function.
   
.. py:function:: type\.static(func)
   
   Return a boolean describing whether the function ``func`` is defined as a static function.
   
   :param func: the function to return the static attribute from
   
.. py:function:: type\.static(func, boolean)
   
   Modify the attributes of the function ``func`` to set it as a static function depending on the value of ``boolean``.
   
   :param func: the function to modify the static attribute
   :param boolean: a boolean value representing whether the function should be set as a static function or not
   
.. py:function:: type\.thunk()
   
   Return a boolean describing whether the current function was determined to be a code thunk.
   
.. py:function:: type\.thunk(func)
   
   Return a boolean describing whether the function ``func`` was determined to be a code thunk.
   
   :param func: the function to return the thunk attribute from
   
.. py:function:: type\.thunk(func, boolean)
   
   Modify the attributes of the function ``func`` to set it as a code thunk depending on the value of ``boolean``.
   
   :param func: the function to modify the thunk attribute
   :param boolean: a boolean value representing whether the function should be set as a code thunk or not
   
.. _ns-function-type-argument:

^^^^^^^^^^^^^^^^^^^^^^
function.type.argument
^^^^^^^^^^^^^^^^^^^^^^

This namespace allows one to interact with individual arguments
within a function prototype. This allows one to rename or modify
the type information for a particular argument within its definition.

This namespace is aliased as :py:obj:`function.type.arg` and :py:obj:`function.type.parameter`.

Some simple ways of fetching or modifying the type of the first parameter
in a function:

    > print( function.argument(0) )
    > print( function.argument.name(1) )
    > oldtype = function.argument(0, 'void*')
    > oldname = function.argument.name(1)
    > location = function.argument.location(2)
    > index = function.argument.remove(3)

.. py:function:: type\.argument(index)
   
   Return the type information for the parameter at the specified ``index`` of the current function.
   
   :param index: the index of the argument to return
   :type index: int or long
   
.. py:function:: type\.argument(index, info)
   
   Modify the type information for the parameter at the specified ``index`` of the current function to ``info``.
   
   :param index: the index of the argument to apply the type to
   :type index: int or long
   :param info: the type information to apply to the specified argument
   :type info: str or idaapi.tinfo_t
   
.. py:function:: type\.argument(func, index)
   
   Return the type information for the parameter at the specified ``index`` of the function ``func``.
   
   :param func: the address or function containing the prototype
   :param index: the index of the argument to return
   :type index: int or long
   
.. py:function:: type\.argument(func, index, info)
   
   Modify the type information for the parameter at the specified ``index`` of the function ``func`` to ``info``.
   
   :param func: the address or function containing the prototype
   :param index: the index of the argument to apply type information to
   :type index: int or long
   :param info: the :py:obj:`idaapi.tinfo_t` containing the type information to apply
   :type info: idaapi.tinfo_t
   
.. py:function:: type\.argument(func, index, info)
   
   Modify the type information for the parameter at the specified ``index`` of the function ``func`` to the string in ``info``.
   
   :param func: the address or function containing the prototype
   :param index: the index of the argument to apply type information to
   :type index: int or long
   :param info: the type information as a string to apply to the argument
   :type info: str
   
.. py:function:: type\.argument\.location(index)
   
   Return the location of the parameter at the specified ``index`` in the current function.
   
   :param index: the index of the parameter to return the location of
   :type index: int or long
   
.. py:function:: type\.argument\.location(func, index)
   
   Return the location of the parameter at the specified ``index`` in the function ``func``.
   
   :param func: the address or function containing the parameter
   :param index: the index of the parameter to return the location of
   :type index: int or long
   
.. py:function:: type\.argument\.name(index)
   
   Return the name of the parameter at the specified ``index`` in the current function.
   
   :param index: the index of the argument to return the name of
   :type index: int or long
   
.. py:function:: type\.argument\.name(index, none)
   
   Remove the name from the parameter at the specified ``index`` in the current function.
   
   :param index: the index of the argument to remove the name from
   :type index: int or long
   :param none: the python value :py:obj:`None`
   :type none: None
   
.. py:function:: type\.argument\.name(index, string, \*suffix)
   
   Modify the name of the parameter at the specified ``index`` of the current function to ``string``.
   
   :param index: the index of the argument to rename
   :type index: int or long
   :param string:
   :type string: str
   :param \*suffix:
   
.. py:function:: type\.argument\.name(func, index)
   
   Return the name of the parameter at the specified ``index`` in the function ``func``.
   
   :param func: the address or function containing the parameter
   :param index: the index of the argument to return the name of
   :type index: int or long
   
.. py:function:: type\.argument\.name(func, index, none)
   
   Remove the name from the parameter at the specified ``index`` in the function ``func``.
   
   :param func: the address or function containing the parameter
   :param index: the index of the argument to remove the name from
   :type index: int or long
   :param none: the python value :py:obj:`None`
   :type none: None
   
.. py:function:: type\.argument\.name(func, index, string, \*suffix)
   
   Modify the name of the parameter at the specified ``index`` of the function ``func`` to ``string``.
   
   :param func: the address or function containing the parameter
   :param index: the index of the argument to rename
   :type index: int or long
   :param string: the string to rename the argument to
   :type string: str
   :param \*suffix: any other integers or strings to append to the name
   
.. py:function:: type\.argument\.remove(index)
   
   Remove the parameter at the specified ``index`` from the current function.
   
   Aliases: :py:func:`function.type.argument.pop<type\.argument\.remove>`
   
   :param index: the index of the parameter to remove
   :type index: int or long
   
.. py:function:: type\.argument\.remove(func, index)
   
   Remove the parameter at the specified ``index`` from the function ``func``.
   
   Aliases: :py:func:`function.type.argument.pop<type\.argument\.remove>`
   
   :param func: the address or function to containing the parameter
   :param index: the index of the parameter to remove
   :type index: int or long
   
.. _ns-function-type-arguments:

^^^^^^^^^^^^^^^^^^^^^^^
function.type.arguments
^^^^^^^^^^^^^^^^^^^^^^^

This namespace allows one to interact the with the arguments
belonging to a function prototype as a whole. This can allow
one to count the number of arguments, or fetch all their names
and types in their entirety.

This namespace is aliased as :py:obj:`function.type.args` and :py:obj:`function.type.parameters`.

.. py:function:: type\.arguments()
   
   Return the type information for each of the parameters belonging to the current function.
   
.. py:function:: type\.arguments(func)
   
   Return the type information for each of the parameters belonging to the function ``func``.
   
   :param func: the address or function containing the prototype with the types to return
   
.. py:function:: type\.arguments(func, types)
   
   Overwrite the type information for the parameters belonging to the function ``func`` with the provided list of ``types``.
   
   :param func: the address or function containing the prototype to modify
   :param types: a tuple or list of types to use for the parameters
   :type types: list or tuple
   
.. py:function:: type\.arguments\.add(info)
   
   Add the provided type information in ``info`` as another parameter to the current function.
   
   Aliases: :py:func:`function.type.arguments.append<type\.arguments\.add>`
   
   :param info: the type information of the parameter
   :type info: str or idaapi.tinfo_t
   
.. py:function:: type\.arguments\.add(func, info)
   
   Add the provided type information in ``info`` as another parameter to the function ``func``.
   
   Aliases: :py:func:`function.type.arguments.append<type\.arguments\.add>`
   
   :param func: the address or function to add a parameter to
   :param info: the type information of the parameter
   :type info: str or idaapi.tinfo_t
   
.. py:function:: type\.arguments\.add(func, info, name, \*suffix)
   
   Add the provided type information in ``info`` with the given ``name`` as another parameter to the function ``func``.
   
   Aliases: :py:func:`function.type.arguments.append<type\.arguments\.add>`
   
   :param func: the address or function to add a parameter to
   :param info: the type information of the parameter
   :type info: str or idaapi.tinfo_t
   :param name: the name of the parameter
   :type name: str
   :param \*suffix: any integers or strings to append to the name
   
.. py:function:: type\.arguments\.count()
   
   Return the number of parameters in the prototype for the current function.
   
.. py:function:: type\.arguments\.count(func)
   
   Return the number of parameters in the prototype of the function identified by ``func``.
   
   :param func: the address or function to return the number of arguments from
   
.. py:function:: type\.arguments\.iterate()
   
   Yield the ``(name, type, location)`` of each of the parameters belonging to the current function.
   
.. py:function:: type\.arguments\.iterate(func)
   
   Yield the ``(name, type, location)`` of each of the parameters belonging to the function ``func``.
   
   :param func: the address or function containing the prototype with the argument locations to return
   
.. py:function:: type\.arguments\.locations()
   
   Return the locations of each of the parameters belonging to the current function.
   
.. py:function:: type\.arguments\.locations(func)
   
   Return the locations of each of the parameters belonging to the function ``func``.
   
   :param func: the address or function containing the prototype with the locations to return
   
.. py:function:: type\.arguments\.names()
   
   Return the names for each of the parameters belonging to the current function.
   
   Aliases: :py:func:`function.type.arguments.name<type\.arguments\.names>`
   
.. py:function:: type\.arguments\.names(func)
   
   Return the names for each of the parameters belonging to the function ``func``.
   
   Aliases: :py:func:`function.type.arguments.name<type\.arguments\.names>`
   
   :param func: the address or function containing the prototype with the argument names to return
   
.. py:function:: type\.arguments\.names(func, names)
   
   Overwrite the names for the parameters belonging to the function ``func`` with the provided list of ``names``.
   
   Aliases: :py:func:`function.type.arguments.name<type\.arguments\.names>`
   
   :param func: the address or function containing the prototype to modify
   :param names: a tuple or list of names to apply to the parameters
   :type names: list or tuple
   
.. py:function:: type\.arguments\.registers()
   
   Return the registers for each of the parameters belonging to the current function.
   
   Aliases: :py:func:`function.type.arguments.regs<type\.arguments\.registers>`
   
.. py:function:: type\.arguments\.registers(func)
   
   Return the registers for each of the parameters belonging to the function ``func``.
   
   Aliases: :py:func:`function.type.arguments.regs<type\.arguments\.registers>`
   
   :param func: the address or function containing the prototype with the registers to return
   
.. py:function:: type\.arguments\.types()
   
   Return the type information for each of the parameters belonging to the current function.
   
   Aliases: :py:func:`function.type.arguments.type<type\.arguments\.types>`
   
.. py:function:: type\.arguments\.types(func)
   
   Return the type information for each of the parameters belonging to the function ``func``.
   
   Aliases: :py:func:`function.type.arguments.type<type\.arguments\.types>`
   
   :param func: the address or function containing the prototype with the argument types to return
   
.. py:function:: type\.arguments\.types(func, types)
   
   Overwrite the type information for the parameters belonging to the function ``func`` with the provided list of ``types``.
   
   Aliases: :py:func:`function.type.arguments.type<type\.arguments\.types>`
   
   :param func: the address or function containing the prototype to modify
   :param types: a tuple or list of types to use for the parameters
   :type types: list or tuple
   
.. _ns-function-type-result:

^^^^^^^^^^^^^^^^^^^^
function.type.result
^^^^^^^^^^^^^^^^^^^^

This namespace allows one to interact with the result as defined
within a function prototype. This allows one to fetch or modify
the type information that is returned by a function.

Some ways to utilize this namespace can be::

    > print( function.type.result() )
    > print( function.type.result.location() )

.. py:function:: type\.result()
   
   Return the result type for the current function as an :py:obj:`idaapi.tinfo_t`.
   
   Aliases: :py:func:`function.result<type\.result>`
   
.. py:function:: type\.result(info)
   
   Modify the result type for the current function to the type information provided as an :py:obj:`idaapi.tinfo_t` provided in ``info``.
   
   Aliases: :py:func:`function.result<type\.result>`
   
   :param info: the :py:obj:`idaapi.tinfo_t` containing the type information to apply to the result
   :type info: idaapi.tinfo_t
   
.. py:function:: type\.result(func)
   
   Return the result type for the function ``func`` as an :py:obj:`idaapi.tinfo_t`.
   
   Aliases: :py:func:`function.result<type\.result>`
   
   :param func: the address or function containing the result to return
   
.. py:function:: type\.result(func, info)
   
   Modify the result type for the function ``func`` to the type information provided as a string in ``info``.
   
   Aliases: :py:func:`function.result<type\.result>`
   
   :param func: the address or function using the result to modify
   :param info: the type information to apply to the result of the function
   :type info: str
   
.. py:function:: type\.result(func, info)
   
   Modify the result type for the function ``func`` to the type information provided as an :py:obj:`idaapi.tinfo_t` in ``info``.
   
   Aliases: :py:func:`function.result<type\.result>`
   
   :param func: the address or function using the result to modify
   :param info: the :py:obj:`idaapi.tinfo_t` containing the type information to apply to the result
   :type info: idaapi.tinfo_t
   
.. py:function:: type\.result\.location()
   
   Return the location of the result belonging to the current function.
   
.. py:function:: type\.result\.location(func)
   
   Return the location of the result belonging to the function ``func``.
   
   :param func: the address or function using the result to return the location of
   
.. _ns-function-xref:

*************
function.xref
*************

This namespace is for navigating the cross-references (xrefs)
associated with a function in the database. This allows for one
to return all of the callers for a function, as well as all of
the functions that it may call.

This namespace is aliased as :py:obj:`function.x`.

Some of the functions within this namespace are also aliased as
the following globals:

- :py:obj:`function.up` - Return all the addresses that reference a function
- :py:obj:`function.down` - Return the callable addresses referenced by a function

Some ways to utilize this namespace can be::

    > print( function.xref.up() )
    > for ea in function.xref.down(): ...

.. py:function:: xref\.argument(index)
   
   Return the address of the parameter being passed to the function reference at the current address for the specified ``index``.
   
   Aliases: :py:func:`function.xref.arg<xref\.argument>`
   
   :param index: the index of the parameter to return the address of
   :type index: int or long
   
.. py:function:: xref\.argument(index, ea)
   
   Return the address of the parameter being passed to the function reference at the address ``ea`` for the specified ``index``.
   
   Aliases: :py:func:`function.xref.arg<xref\.argument>`
   
   :param index: the index of the parameter to return the address of
   :type index: int or long
   :param ea: the address of the reference to the function
   :type ea: int or long
   
.. py:function:: xref\.argument(func, index, ea)
   
   Return the address of the parameter from the specified ``index`` of the function ``func`` that is being passed to the function reference at the address ``ea``.
   
   Aliases: :py:func:`function.xref.arg<xref\.argument>`
   
   :param func: the function to return the argument from
   :param index: the index of the parameter to return the address of
   :type index: int or long
   :param ea: the address of the reference to the function
   :type ea: int or long
   
.. py:function:: xref\.arguments()
   
   Return the address of each of the parameters being passed to the function reference at the current address.
   
   Aliases: :py:func:`function.xref.args<xref\.arguments>`
   
.. py:function:: xref\.arguments(ea)
   
   Return the address of each of the parameters being passed to the function reference at address ``ea``.
   
   Aliases: :py:func:`function.xref.args<xref\.arguments>`
   
   :param ea: the address of the reference to the function
   :type ea: int or long
   
.. py:function:: xref\.arguments(func, ea)
   
   Return the address of each of the parameters for the function ``func`` that are being passed to the function reference at address ``ea``.
   
   Aliases: :py:func:`function.xref.args<xref\.arguments>`
   
   :param func: the address of the reference to the function
   :param ea: the address of the reference to the function to return the arguments for
   :type ea: int or long
   
.. py:function:: xref\.down(\*\*references)
   
   Return all of the addresses that are referenced by a branch instruction from the current function.
   
   Aliases: :py:func:`function.down<xref\.down>`
   
   :param \*\*references: a boolean specifying to include the address of the instruction with the yielded reference
   
.. py:function:: xref\.down(func, \*\*references)
   
   Return all of the addresses that are referenced by a branch instruction from the function ``func``.
   
   If the boolean ``references`` is true, then include the reference address of each instruction along with its.
   
   Aliases: :py:func:`function.down<xref\.down>`
   
   :param func: the function to return the references for
   :param \*\*references: a boolean specifying to include the address of the instruction with the yielded refrence
   
.. py:function:: xref\.up()
   
   Return all of the addresses that reference the current function.
   
   Aliases: :py:func:`function.up<xref\.up>`
   
.. py:function:: xref\.up(func)
   
   Return all of the addresses that reference the function ``func``.
   
   Aliases: :py:func:`function.up<xref\.up>`
   
   :param func: the function to return the references for
   
